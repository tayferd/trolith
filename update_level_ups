import random
import os


# Game Variables
player_health = 30
max_player_health = 30  # Define max_player_health globally
xp = 0
level = 1
gold = 0
permanent_bonuses = {"Melee": 0, "Ranged": 0, "Magic": 0, "Shield": 0}
enemies = []
equipment = {
    "Melee": None,
    "Ranged": None,
    "Magic": None,
    "Armor": None
}
# Actions
actions = {
    "a": "Melee",
    "b": "Magic",
    "c": "Ranged",
    "d": "Shield"
}

spells = {
    "a": "Illusion",
    "b": "Elemental",
    "c": "Occult",
    "d": "Clerical"
}

enemy_types = {
    range(1, 11): "Zombie",
    range(11, 21): "Goblin",
    range(21, 31): "Orc",
    range(31, 40): "Troll",
    range(40, 41): "Giant"
}


def generate_hp_bar(current_hp, max_hp):
    """Generate an HP bar with colors based on the percentage of remaining HP."""
    # Ensure health is within valid range
    current_hp = max(0, min(current_hp, max_hp))

    bar_length = 20  # Total length of the bar
    filled_length = int(current_hp / max_hp * bar_length)
    empty_length = bar_length - filled_length

    # Determine color (green -> yellow -> red)
    if current_hp > max_hp * 0.6:
        color = "\033[92m"  # Green
    elif current_hp > max_hp * 0.3:
        color = "\033[93m"  # Yellow
    else:
        color = "\033[91m"  # Red

    return f"{color}{'█' * filled_length}{'░' * empty_length}\033[0m"


def clear_screen():
    """Clear the terminal screen."""
    os.system('cls' if os.name == 'nt' else 'clear')
def roll_dice(sides):
    """Roll a dice with the specified number of sides."""
    return random.randint(1, sides)

def roll_initiative():
    """Roll for initiative (1d10) for player and enemies, reroll ties."""
    initiative_rolls = [roll_dice(10) for _ in range(len(enemies) + 1)]  # Player + enemies
    sorted_initiative = sorted(enumerate(initiative_rolls), key=lambda x: x[1])  # Sort by roll, lowest first
    print("\nInitiative Order:")
    for i, (index, roll) in enumerate(sorted_initiative):
        if index == 0:
            print(f"Player goes {i + 1} with roll {roll}")
        else:
            print(f"Enemy {index} goes {i + 1} with roll {roll}")
    return sorted_initiative
def get_enemy_type(hp):
    """Return enemy type based on HP."""
    for hp_range, enemy_type in enemy_types.items():
        if hp in hp_range:
            return enemy_type
def generate_enemies():
    """Generate 1-3 enemies with random health."""
    global enemies
    enemies = [{"id": i + 1, "type": None, "health": random.randint(1, 40)} for i in range(random.randint(1, 3))]
    for enemy in enemies:
        enemy["type"] = get_enemy_type(enemy["health"])
        enemy["max_health"] = enemy["health"]  # Store initial health as max health



            # Main Game Loop
def choose_enemy():
    """Prompt the player to select an enemy to attack."""
    print("\nChoose an enemy to target:")
    for i, enemy in enumerate(enemies, 1):
        print(f"{i}. {enemy['type']} ({generate_hp_bar(enemy['health'], enemy['max_health'])})")
    while True:
        choice = input("Enter the enemy number: ")
        if choice.isdigit() and 1 <= int(choice) <= len(enemies):
            return int(choice) - 1
        print("Invalid choice. Please select a valid enemy.")
def choose_action():
    """Prompt the player to choose an action."""
    print("\nChoose your action:")
    for key, action in actions.items():
        print(f"{key}. {action}")
    while True:
        choice = input("Enter your choice: ").lower()
        if choice in actions:
            return actions[choice]
        print("Invalid choice. Please select a valid action.")
def choose_spell():
    """Let the player choose a spell for Magic."""
    print("\nChoose your spell:")
    for key, spell in spells.items():
        print(f"{key}. {spell}")
    while True:
        choice = input("Enter your spell: ").lower()
        if choice in spells:
            return spells[choice]
        print("Invalid choice. Please choose a valid spell.")
def choose_melee_option():
    """Prompt the player to choose a melee option."""
    print("\nChoose your melee style:")
    print("a. Precision (+2 to roll, -1 damage)")
    print("b. Reckless (-2 to roll, +2 damage)")
    print("c. Normal (Flat roll and damage)")
    while True:
        choice = input("Enter your choice: ").lower()
        if choice in ["a", "b", "c"]:
            return choice
        print("Invalid choice. Please choose a valid melee style.")
def choose_ranged_option():
    """Prompt the player to choose a ranged option."""
    print("\nChoose your ranged style:")
    print("a. Precision (+2 to roll, -1 damage)")
    print("b. Split Shot (1d4 damage to each enemy if roll wins)")
    print("c. Bomb (-5 to roll, +15 damage to target, 3 splash damage to others)")
    while True:
        choice = input("Enter your choice: ").lower()
        if choice in ["a", "b", "c"]:
            return choice
        print("Invalid choice. Please choose a valid ranged style.")
def choose_shield_option():
    """Prompt the player to choose a shield option."""
    print("\nChoose your shield style:")
    print("a. Runeguard (+6 to roll, reflect half of incoming damage to all enemies)")
    print("b. Forgeguard (+10 to roll, but no damage is dealt)")
    while True:
        choice = input("Enter your choice: ").lower()
        if choice in ["a", "b"]:
            return choice
        print("Invalid choice. Please choose a valid shield style.")

# Roll-off mechanics
def calculate_roll(player_roll, enemy_roll, bonus=0, shield=False, shield_style=None):
    """Calculate damage or outcomes based on roll-offs with bonus and shield logic."""
    if shield:
        if shield_style == "a":  # Runeguard
            player_roll += 6
        elif shield_style == "b":  # Forgeguard
            player_roll += 10

    # Debugging to ensure correct values
    print(f"Player Roll: {player_roll}, Enemy Roll: {enemy_roll}, Bonus: {bonus}, Shield: {shield}, Shield Style: {shield_style}")

    # Critical hit check
    if player_roll == 20:
        return 'player', 2  # Double damage for critical hits

    # Roll comparisons
    if player_roll > enemy_roll:
        return 'player', 1  # Full damage to enemy
    elif enemy_roll > player_roll:
        return 'enemy', 1  # Full damage to player
    else:
        return 'tie', 0  # No damage, no effect

def calculate_advantage(player_choice, enemy_choice):
    """Determine advantage based on player and enemy choices."""
    if player_choice == "Shield":
        return 0  # Shield never has advantage or disadvantage
    if player_choice == enemy_choice:
        return 0  # No advantage if choices are the same
    advantage_rules = {
        "Melee": "Magic",  # Melee has advantage over Magic
        "Magic": "Ranged",  # Magic has advantage over Ranged
        "Ranged": "Melee"  # Ranged has advantage over Melee
    }
    return 7 if advantage_rules[player_choice] == enemy_choice else 0
# Define the logic for Ranged attacks in the calculate_damage function
def calculate_ranged_damage(player_roll, enemy_rolls, enemies, equipment_bonus, style, target_enemy_id=None):
    """
    Calculate damage for ranged attacks based on style and equipment bonuses.
    """
    action_summary = []
    total_damage = 0

    if style == "a":  # Precision
        player_roll += 2  # Boost to roll
        damage = roll_dice(10) - 1 + equipment_bonus["damage"]
        damage = max(0, damage)  # Prevent negative damage
        action_summary.append("You chose Precision: +2 roll, -1 damage.")
        if target_enemy_id is not None and player_roll > enemy_rolls[target_enemy_id]:
            enemies[target_enemy_id]["health"] -= damage
            action_summary.append(f"Precision shot dealt {damage} damage to {enemies[target_enemy_id]['type']}.")
            total_damage += damage

    elif style == "b":  # Split Shot
        action_summary.append("You chose Split Shot: damage to all enemies.")
        for i, enemy in enumerate(enemies):
            if enemy["health"] > 0:
                split_damage = roll_dice(4) + equipment_bonus["damage"]
                enemies[i]["health"] -= split_damage
                action_summary.append(f"Split Shot dealt {split_damage} damage to {enemy['type']}.")
                total_damage += split_damage

    elif style == "c":  # Bomb
        player_roll -= 5  # Penalty to roll
        bomb_damage = 15 + roll_dice(10) + equipment_bonus["damage"]
        splash_damage = 3
        if target_enemy_id is not None and player_roll > enemy_rolls[target_enemy_id]:
            enemies[target_enemy_id]["health"] -= bomb_damage
            action_summary.append(f"Bomb dealt {bomb_damage} damage to {enemies[target_enemy_id]['type']}.")
        else:
            action_summary.append("Bomb missed the target.")
        for i, enemy in enumerate(enemies):
            if i != target_enemy_id and enemy["health"] > 0:
                enemies[i]["health"] -= splash_damage
                action_summary.append(f"{enemy['type']} took {splash_damage} splash damage.")
                total_damage += splash_damage

    elif style == "d":  # Reckless
        player_roll -= 2  # Penalty to roll
        damage = roll_dice(10) + 2 + equipment_bonus["damage"]
        damage = max(0, damage)  # Prevent negative damage
        action_summary.append("You chose Reckless: -2 roll, +2 damage.")
        if target_enemy_id is not None and player_roll > enemy_rolls[target_enemy_id]:
            enemies[target_enemy_id]["health"] -= damage
            action_summary.append(f"Reckless shot dealt {damage} damage to {enemies[target_enemy_id]['type']}.")
            total_damage += damage

    else:
        action_summary.append("Invalid ranged attack style.")

    return total_damage, action_summary


def calculate_damage(action, player_roll, enemy_rolls, enemies, spell=None, style=None, target_enemy_id=None):
    """
    Calculate damage and effects based on player and enemy actions.
    """
    global player_health, max_player_health, equipment

    action_summary = []
    damage = 0  # Default damage

    # Apply weapon/armor bonuses
    equipment_bonus = {"hit": 0, "damage": 0}
    if action == "Melee" and equipment["Melee"]:
        if "Dagger" in equipment["Melee"]:
            equipment_bonus["hit"] += 2
            equipment_bonus["damage"] -= 2
        elif "Short Sword" in equipment["Melee"]:
            equipment_bonus["hit"] += 1
        elif "Long Sword" in equipment["Melee"]:
            equipment_bonus["damage"] += 1
        elif "Great Sword" in equipment["Melee"]:
            equipment_bonus["damage"] += 2
            equipment_bonus["hit"] -= 2

    if action == "Ranged" and equipment["Ranged"]:
        if "Short Bow" in equipment["Ranged"]:
            equipment_bonus["hit"] += 2
            equipment_bonus["damage"] -= 1
        elif "Longbow" in equipment["Ranged"]:
            equipment_bonus["damage"] += 1
        elif "Crossbow" in equipment["Ranged"]:
            equipment_bonus["damage"] += 2
            equipment_bonus["hit"] -= 1
        elif "Throwing Knives" in equipment["Ranged"]:
            equipment_bonus["hit"] += 2
            equipment_bonus["damage"] -= 1

    if action == "Magic" and equipment["Magic"]:
        if "Wand" in equipment["Magic"]:
            equipment_bonus["hit"] += 2
            equipment_bonus["damage"] -= 1
        elif "Staff" in equipment["Magic"]:
            equipment_bonus["hit"] += 1
        elif "Orb" in equipment["Magic"]:
            equipment_bonus["damage"] += 2
            equipment_bonus["hit"] -= 1
        elif "Spellbook" in equipment["Magic"]:
            equipment_bonus["hit"] += 1
            equipment_bonus["damage"] += 1

    # Update player roll with equipment bonus
    player_roll += equipment_bonus["hit"]

    # Resolve actions
    if action == "Melee":
        if style == "a":  # Precision
            player_roll += 2  # Precision adds +2 to hit
            damage = max(roll_dice(10) + equipment_bonus["damage"] - 1, 0)  # Subtract 1 from damage
            if target_enemy_id is not None and player_roll > enemy_rolls[target_enemy_id]:
                enemies[target_enemy_id]["health"] -= damage
                action_summary.append(f"Precision attack dealt {damage} damage to {enemies[target_enemy_id]['type']}.")
            else:
                action_summary.append(f"Your precision attack missed {enemies[target_enemy_id]['type']}.")
        elif style == "b":  # Reckless
            player_roll -= 2  # Reckless subtracts -2 from hit
            damage = max(roll_dice(10) + 2 + equipment_bonus["damage"], 0)  # Add +2 to damage
            if target_enemy_id is not None and player_roll > enemy_rolls[target_enemy_id]:
                enemies[target_enemy_id]["health"] -= damage
                action_summary.append(f"Reckless attack dealt {damage} damage to {enemies[target_enemy_id]['type']}.")
            else:
                action_summary.append(f"Your reckless attack missed {enemies[target_enemy_id]['type']}.")
        elif style == "c":  # Normal
            damage = max(roll_dice(10) + equipment_bonus["damage"], 0)  # Normal damage roll
            if target_enemy_id is not None and player_roll > enemy_rolls[target_enemy_id]:
                enemies[target_enemy_id]["health"] -= damage
                action_summary.append(f"Normal attack dealt {damage} damage to {enemies[target_enemy_id]['type']}.")
            else:
                action_summary.append(f"Your normal attack missed {enemies[target_enemy_id]['type']}.")
        else:
            action_summary.append("Invalid melee style.")

    elif action == "Ranged":
        if style == "a":  # Precision
            player_roll += 2
            damage = max(roll_dice(10) + equipment_bonus["damage"] - 1, 0)
            if target_enemy_id is not None and player_roll > enemy_rolls[target_enemy_id]:
                enemies[target_enemy_id]["health"] -= damage
                action_summary.append(f"Player dealt {damage} damage to {enemies[target_enemy_id]['type']}.")
            else:
                action_summary.append(f"Your ranged precision attack missed {enemies[target_enemy_id]['type']}.")
        elif style == "b":  # Split Shot
            for i, enemy in enumerate(enemies):
                if player_roll > enemy_rolls[i]:
                    splash_damage = max(roll_dice(4) + equipment_bonus["damage"], 0)
                    enemy["health"] -= splash_damage
                    action_summary.append(f"{enemy['type']} took {splash_damage} damage from Split Shot.")
        elif style == "c":  # Bomb
            player_roll -= 5
            if target_enemy_id is not None:
                primary_damage = max(roll_dice(10) + 15 + equipment_bonus["damage"], 0)
                splash_damage = 3
                enemies[target_enemy_id]["health"] -= primary_damage
                action_summary.append(f"Bomb dealt {primary_damage} damage to {enemies[target_enemy_id]['type']}.")
                for i, enemy in enumerate(enemies):
                    if i != target_enemy_id:
                        enemy["health"] -= splash_damage
                        action_summary.append(f"{enemy['type']} took {splash_damage} splash damage from Bomb.")
        else:
            action_summary.append("Invalid ranged style.")
    elif action == "Magic":
        if spell == "Illusion":
            # Apply a -5 penalty to the enemies' rolls in the next attack phase
            for enemy in enemies:
                if enemy["health"] > 0:
                    enemy["roll_penalty"] = 5  # Add a penalty attribute to the enemy
                    action_summary.append(f"Illusion applied: {enemy['type']}'s rolls will be reduced by 5.")

        elif spell == "Elemental":
            if target_enemy_id is not None and player_roll > enemy_rolls[target_enemy_id]:
                damage = roll_dice(10) + 5 + equipment_bonus["damage"]
                enemies[target_enemy_id]["health"] -= damage
                action_summary.append(f"Elemental dealt {damage} damage to {enemies[target_enemy_id]['type']}.")
        elif spell == "Occult":
            total_life_steal = 0
            for enemy in enemies:
                if enemy["health"] > 0:
                    occult_damage = roll_dice(4) + equipment_bonus["damage"]
                    enemy["health"] = max(0, enemy["health"] - occult_damage)
                    total_life_steal += occult_damage // 2
                    action_summary.append(f"{enemy['type']} took {occult_damage} Occult damage.")
            player_health = min(max_player_health, player_health + total_life_steal)
            action_summary.append(f"Player healed for {total_life_steal} HP.")

        elif spell == "Clerical":
                heal = roll_dice(8)
                player_health = min(player_health + heal, max_player_health)
                action_summary.append(f"Clerical healed player for {heal} HP.")
        else:
            action_summary.append("Invalid magic spell.")

    return damage, action_summary

# Update the test.py logic with the above-corrected `calculate_damage`.

def handle_attack(player_choice, player_roll, enemy_rolls, enemy_choices, style=None, spell=None, target_enemy_id=None):
    """
    Handle the attack phase of the player's turn.
    """
    player_damage = 0
    action_summary = []

    if player_choice == "Melee":
        if style == "a":  # Precision
            player_roll += 2
            damage = roll_dice(10) - 1
            action_summary.append("You chose Precision: +2 roll, -1 damage.")
        elif style == "b":  # Reckless
            player_roll -= 2
            damage = roll_dice(10) + 2
            action_summary.append("You chose Reckless: -2 roll, +2 damage.")
        elif style == "c":  # Normal
            damage = roll_dice(10)
            action_summary.append("You chose Normal: Flat roll and damage.")
        else:
            action_summary.append("Invalid style for Melee. No damage dealt.")
            return player_damage, action_summary

        target_enemy_roll = enemy_rolls[target_enemy_id]
        if player_roll > target_enemy_roll:
            player_damage = damage
            action_summary.append(f"You dealt {damage} damage to enemy {enemies[target_enemy_id]['type']}.")
        else:
            action_summary.append(f"Your attack missed enemy {enemies[target_enemy_id]['type']}.")

    elif player_choice == "Ranged":
        if style == "a":  # Precision
            player_roll += 2
            damage = roll_dice(10) - 1
            action_summary.append("You chose Precision: +2 roll, -1 damage.")
            if player_roll > enemy_rolls[target_enemy_id]:
                player_damage = damage
                action_summary.append(f"You dealt {damage} damage to enemy {enemies[target_enemy_id]['type']}.")
        elif style == "b":  # Split Shot
            action_summary.append("You chose Split Shot: 1d4 damage to all enemies.")
            for i, enemy_roll in enumerate(enemy_rolls):
                if player_roll > enemy_roll:
                    splash_damage = roll_dice(4)
                    enemies[i]["health"] -= splash_damage
                    action_summary.append(f"You dealt {splash_damage} damage to enemy {enemies[i]['type']}.")
        elif style == "c":  # Bomb
            player_roll -= 5
            damage = roll_dice(10) + 5
            splash_damage = 3
            if player_roll > enemy_rolls[target_enemy_id]:
                player_damage = damage
                action_summary.append(f"You dealt {damage} damage to enemy {enemies[target_enemy_id]['type']}.")
            for i, enemy in enumerate(enemies):
                if i != target_enemy_id:
                    enemies[i]["health"] -= splash_damage
                    action_summary.append(f"{enemy['type']} took {splash_damage} splash damage.")
        else:
            action_summary.append("Invalid style for Ranged. No damage dealt.")

    elif player_choice == "Magic":
        if spell == "a":  # Illusion
            for i in range(len(enemy_rolls)):
                enemy_rolls[i] -= 5
            action_summary.append("You cast Illusion: Enemies get -5 to rolls.")
        elif spell == "b":  # Elemental
            damage = roll_dice(10) + 5
            if player_roll > enemy_rolls[target_enemy_id]:
                player_damage = damage
                action_summary.append(f"You dealt {damage} damage to enemy {enemies[target_enemy_id]['type']}.")
        elif spell == "c":  # Occult
            for i, enemy in enumerate(enemies):
                life_drain = roll_dice(4)
                enemies[i]["health"] -= life_drain
                player_health = min(player_health + life_drain // 2, max_player_health)
                action_summary.append(f"You drained {life_drain} HP from enemy {enemy['type']}.")
        elif spell == "d":  # Clerical
            heal = roll_dice(8)
            player_health = min(player_health + heal, max_player_health)
            action_summary.append(f"You healed yourself for {heal} HP.")

    return player_damage, action_summary

def battle():
    """Simulate a battle."""
    global player_health, max_player_health, level, xp, enemies
    clear_screen()
    print("Welcome to the RPG Dice Roll Adventure!\n")

    generate_enemies()
    while player_health > 0 and any(enemy["health"] > 0 for enemy in enemies):
        # Display Player Stats
        clear_screen()
        print("\nYour Turn!")

        # Display player stats
        print(f"Level: {level} | Atk: {permanent_bonuses['Melee']} | Def: {permanent_bonuses['Shield']} "
              f"| Magic: {permanent_bonuses['Magic']} | Gold: {gold} | XP: {xp}/{level * 100}")
        print(f"Your HP: {generate_hp_bar(player_health, max_player_health)}")

        # Choose Enemy
        target_enemy_id = choose_enemy()
        if target_enemy_id is None:
            print("Invalid choice. Turn skipped.")
            continue

        # Choose Action
        action = choose_action()
        spell, style = None, None
        if action == "Melee":
            style = choose_melee_option()
        elif action == "Ranged":
            style = choose_ranged_option()
        elif action == "Magic":
            spell = choose_spell()
        elif action == "Shield":
            style = choose_shield_option()

        # Calculate Player Attack Phase
        player_roll = roll_dice(20)
        enemy_rolls = [roll_dice(20) for _ in enemies]
        enemy_choices = [random.choice(["Melee", "Magic", "Ranged"]) for _ in enemies]
        print("\nAttack Phase:")
        if action == "Shield":
            print("Player shields.")
        else:
            player_damage, attack_results = calculate_damage(
                action, player_roll, enemy_rolls, enemies, spell=spell, style=style, target_enemy_id=target_enemy_id
            )
            print(f"Your attack roll: {player_roll}")
            print("\n".join(attack_results))

        # Enemy Attack Phase
        print("\nEnemies are attacking!")
        for i, enemy in enumerate(enemies):
            if enemy["health"] <= 0:
                continue
            enemy_roll = roll_dice(20)
            player_defense_roll = roll_dice(20)

            # Apply shield bonus if shield style is chosen
            if action == "Shield" and style == "a":  # Runeguard
                player_defense_roll += 6
            elif action == "Shield" and style == "b":  # Forgeguard
                player_defense_roll += 10

            # Advantage logic (based on enemy choices and player action)
            advantage = calculate_advantage(enemy_choices[i], action)
            enemy_roll += advantage

            print(
                f"{enemy['type']} ({enemy_choices[i]}): Roll = {enemy_roll}, Player Defense Roll = {player_defense_roll}")
            if enemy_roll > player_defense_roll:
                damage = roll_dice(6)
                player_health -= damage
                print(f"{enemy['type']} hit you for {damage} damage!")
                # Reflection logic for Runeguard
                if action == "Shield" and style == "a":  # Runeguard
                    reflect_damage = max(damage // 2, 0)  # Reflect half of incoming damage
                    for enemy in enemies:
                        if enemy["health"] > 0:
                            enemy["health"] -= reflect_damage
                            print(f"{enemy['type']} took {reflect_damage} reflected damage!")
            else:
                print(f"{enemy['type']} missed!")

        # Check Player Health
        if player_health <= 0:
            print("\nGame Over! You were defeated.")
            break

        # Check if all enemies are defeated
        if all(enemy["health"] <= 0 for enemy in enemies):
            xp += 10 * level
            print("\nVictory! All enemies defeated.")
            print(f"You gained {10 * level} XP.")
            level_up()
            if xp >= level * 100:
                level_up()
            break

        input("\nPress Enter to continue...")

# Next steps will integrate this function with your system for testing and refinement.

def level_up():
    """Handle leveling up."""
    global level, player_health, max_player_health, permanent_bonuses, equipment

    level += 1
    max_player_health += 10
    player_health = max_player_health  # Reset health to full on level up
    print(f"\nCongratulations! You've reached Level {level}!")
    print(f"Your HP has been restored to {player_health} and increased by 10!")

    # Choose a permanent bonus
    print("\nChoose a permanent bonus:")
    print("a. +1 Melee\nb. +1 Ranged\nc. +1 Magic\nd. +1 Shield")
    while True:
        bonus_choice = input("Choose a bonus: ").lower()
        if bonus_choice in ["a", "b", "c", "d"]:
            if bonus_choice == "a":
                permanent_bonuses["Melee"] += 1
            elif bonus_choice == "b":
                permanent_bonuses["Ranged"] += 1
            elif bonus_choice == "c":
                permanent_bonuses["Magic"] += 1
            elif bonus_choice == "d":
                permanent_bonuses["Shield"] += 1
            break
        print("Invalid choice. Please choose a valid bonus.")

    print("\nChoose an equipment upgrade:")
    # Equipment upgrades based on type
    upgrade_options = {
        "Melee": ["Dagger (+2 to hit, -2 damage)", "Short Sword (+1 to hit)", "Long Sword (+1 to damage)", "Great Sword (+2 damage, -2 to hit)"],
        "Ranged": ["Short Bow (+2 to hit, -1 damage)", "Longbow (+1 to damage)", "Crossbow (+2 damage, -1 to hit)", "Throwing Knives (+2 to hit, -1 damage)"],
        "Magic": ["Wand (+2 to hit, -1 damage)", "Staff (+1 to hit)", "Orb (+2 to damage, -1 to hit)", "Spellbook (+1 to hit, +1 damage)"],
        "Shield": ["Half Plate (+2 to defense rolls)", "Leather Armor (+1 ranged hit, +1 defense)", "Splint Armor (+1 melee hit, +1 defense)", "Mage Robes (+2 magic damage, -1 defense)"]
    }

    for category, upgrades in upgrade_options.items():
        print(f"\n{category} Upgrades:")
        for i, upgrade in enumerate(upgrades, 1):
            print(f"{i}. {upgrade}")

        print(f"\nChoose your {category.lower()} upgrade:")
        while True:
            upgrade_choice = input(f"Enter the number (1-{len(upgrades)}): ").strip()
            if upgrade_choice.isdigit() and 1 <= int(upgrade_choice) <= len(upgrades):
                selected_upgrade = upgrades[int(upgrade_choice) - 1]
                equipment[category] = selected_upgrade
                print(f"You chose: {selected_upgrade}")
                break
            print("Invalid choice. Please choose a valid upgrade.")
def choose_melee_weapon():
    """Allow the player to choose a melee weapon upgrade."""
    while True:
        print("\nChoose a melee weapon:")
        print("a. Dagger (+2 to hit, -2 damage)")
        print("b. Short Sword (+1 to hit, no damage adjustment)")
        print("c. Long Sword (+1 to damage, no hit adjustment)")
        print("d. Great Sword (+2 to damage, -2 to hit)")
        choice = input("Enter your choice: ").lower()
        if choice in ["a", "b", "c", "d"]:
            equipment["Melee"] = choice
            print(f"You equipped a {get_melee_weapon_name(choice)}.")
            break  # Exit the loop after a valid choice
        else:
            print("Invalid choice. Please choose a valid melee weapon.")
def get_melee_weapon_name(choice):
    """Get the name of the melee weapon based on the choice."""
    return {
        "a": "Dagger",
        "b": "Short Sword",
        "c": "Long Sword",
        "d": "Great Sword"
    }[choice]
def get_ranged_weapon_name(choice):
    """Get the name of the ranged weapon based on the choice."""
    return {
        "a": "Short Bow",
        "b": "Long Bow",
        "c": "Crossbow",
        "d": "Throwing Knives"
    }[choice]
def get_magic_item_name(choice):
    """Get the name of the magic item based on the choice."""
    return {
        "a": "Wand",
        "b": "Staff",
        "c": "Orb",
        "d": "Spellbook"
    }[choice]
def get_armor_name(choice):
    """Get the name of the armor based on the choice."""
    return {
        "a": "Half Plate",
        "b": "Leather Armor",
        "c": "Splint Armor",
        "d": "Mage Robes"
    }[choice]
def choose_armor():
    """Allow the player to choose an armor upgrade."""
    print("\nChoose an armor type:")
    print("a. Half Plate (+2 to defense rolls)")
    print("b. Leather Armor (+1 to hit with Ranged, +1 to defense rolls)")
    print("c. Splint Armor (+1 to defense rolls, +1 to Melee)")
    print("d. Mage Robes (-1 to defense rolls, +2 to Magic damage)")
    while True:
        choice = input("Enter your choice: ").lower()
        if choice in ["a", "b", "c", "d"]:
            equipment["Armor"] = choice
            print(f"You equipped {get_armor_name(choice)}.")
            break
        print("Invalid choice. Please choose a valid armor type.")


def reset_player():
    """Reset player stats for a new game."""
    global player_health, max_player_health, level, xp, gold, permanent_bonuses, equipment
    player_health = 30
    max_player_health = 30
    level = 1
    xp = 0
    gold = 0
    permanent_bonuses = {"Melee": 0, "Ranged": 0, "Magic": 0, "Shield": 0}
    equipment = {"Melee": None, "Ranged": None, "Magic": None, "Shield": None}
def game_intro():
    """Display the game introduction."""
    intro_text = """
        ███████████████████████████████████████
        ███ WELCOME TO THE REALM OF SHADOWS ███
        ███████████████████████████████████████

        In this dark and mysterious land, you are a brave adventurer 
        fighting to survive the trials and challenges that await. 
        Every choice you make will shape your destiny.

        Prepare yourself, as your journey begins now...

    """
    print(intro_text)

    while True:
        start = input("Do you wish to begin your adventure? (yes/no): ").lower()
        if start == "yes":
            print("\nThe journey begins...\n")
            return True  # Start the game
        elif start == "no":
            print("\nFarewell, adventurer. Come back when you are ready!\n")
            exit()  # Exit the game
        else:
            print("Invalid choice. Please enter 'yes' or 'no'.")

def game_over():
    """Handle game over and ask to retry."""
    print("\nGame Over! You were defeated.")
    while True:
        retry = input("Would you like to try again? (yes/no): ").lower()
        if retry == "yes":
            print("\nRestarting the adventure...")
            reset_player()
            return True  # Indicate to restart the game
        elif retry == "no":
            print("\nThank you for playing! Farewell!")
            exit()  # Exit the game
        else:
            print("Invalid choice. Please enter 'yes' or 'no'.")

def main_game():
    """Main game loop."""
    while True:
        if game_intro():  # Show the intro and start the game
            while player_health > 0:
                generate_enemies()  # Generate a new set of enemies
                battle()  # Start the battle phase

            # If player dies, handle game over logic
            if not game_over():
                break  # Exit the game loop if player does not want to retry


print("\nThank you for playing!")


if __name__ == "__main__":
    main_game()


