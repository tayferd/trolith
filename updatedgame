import random
import os

# Game Variables
player_health = 30
xp = 0
level = 1
gold = 0
permanent_bonuses = {"Melee": 0, "Ranged": 0, "Magic": 0, "Shield": 0}
enemies = []

# Actions
actions = {
    "a": "Melee",
    "b": "Magic",
    "c": "Ranged",
    "d": "Shield"
}

spells = {
    "a": "Illusion",
    "b": "Elemental",
    "c": "Occult",
    "d": "Clerical"
}

enemy_types = {
    range(1, 11): "Zombie",
    range(11, 21): "Goblin",
    range(21, 31): "Orc",
    range(31, 40): "Troll",
    range(40, 41): "Giant"
}

def roll_dice(sides):
    """Roll a dice with the specified number of sides."""
    return random.randint(1, sides)

def clear_screen():
    """Clear the terminal screen."""
    os.system('cls' if os.name == 'nt' else 'clear')  # Clears the whole screen
    print("\n" * 100)  # Adds some space to push the previous content off the screen

def get_enemy_type(hp):
    """Return enemy type based on HP."""
    for hp_range, enemy_type in enemy_types.items():
        if hp in hp_range:
            return enemy_type

def generate_hp_bar(current_hp, max_hp):
    """Generate an HP bar with colors based on the percentage of remaining HP."""
    bar_length = 20  # Total length of the bar
    filled_length = int(current_hp / max_hp * bar_length)
    empty_length = bar_length - filled_length

    # Determine color (green -> yellow -> red)
    if current_hp > max_hp * 0.6:
        color = "\033[92m"  # Green
    elif current_hp > max_hp * 0.3:
        color = "\033[93m"  # Yellow
    else:
        color = "\033[91m"  # Red

    return f"{color}{'█' * filled_length}{'░' * empty_length}\033[0m"

def generate_enemies():
    """Generate 1-3 enemies with random health."""
    global enemies
    enemies = [{"id": i + 1, "type": None, "health": random.randint(1, 40)} for i in range(random.randint(1, 3))]
    for enemy in enemies:
        enemy["type"] = get_enemy_type(enemy["health"])
        enemy["max_health"] = enemy["health"]  # Store initial health as max health
    print("\nEnemies:")
    for enemy in enemies:
        print(f"{enemy['type']}: {generate_hp_bar(enemy['health'], enemy['max_health'])}")

def choose_enemy():
    """Prompt the player to select an enemy to attack."""
    print("\nChoose an enemy to target:")
    for i, enemy in enumerate(enemies, 1):
        print(f"{i}. {enemy['type']} ({generate_hp_bar(enemy['health'], enemy['max_health'])})")
    while True:
        choice = input("Enter the enemy number: ")
        if choice.isdigit() and 1 <= int(choice) <= len(enemies):
            return int(choice) - 1
        print("Invalid choice. Please select a valid enemy.")

def choose_action():
    """Prompt the player to choose an action."""
    print("\nChoose your action:")
    for key, action in actions.items():
        print(f"{key}. {action}")
    while True:
        choice = input("Enter your choice: ").lower()
        if choice in actions:
            return actions[choice]
        print("Invalid choice. Please select a valid action.")

def choose_shield_option():
    """Prompt the player to choose a shield option."""
    print("\nChoose your shield style:")
    print("a. Runeguard (+6 to roll, reflect half of incoming damage to all enemies)")
    print("b. Forgeguard (+10 to roll, but no damage is dealt)")
    while True:
        choice = input("Enter your choice: ").lower()
        if choice in ["a", "b"]:
            return choice
        print("Invalid choice. Please choose a valid shield style.")

def choose_melee_option():
    """Prompt the player to choose a melee option."""
    print("\nChoose your melee style:")
    print("a. Precision (+2 to roll, -1 damage)")
    print("b. Reckless (-2 to roll, +2 damage)")
    print("c. Normal (Flat roll and damage)")
    while True:
        choice = input("Enter your choice: ").lower()
        if choice in ["a", "b", "c"]:
            return choice
        print("Invalid choice. Please choose a valid melee style.")

def choose_ranged_option():
    """Prompt the player to choose a ranged option."""
    print("\nChoose your ranged style:")
    print("a. Precision (+2 to roll, -1 damage)")
    print("b. Split Shot (1d4 damage to each enemy if roll wins)")
    print("c. Bomb (-5 to roll, +15 damage to target, 3 splash damage to others)")
    while True:
        choice = input("Enter your choice: ").lower()
        if choice in ["a", "b", "c"]:
            return choice
            
def choose_spell():
    """Let the player choose a spell for Magic."""
    print("\nChoose your spell:")
    for key, spell in spells.items():
        print(f"{key}. {spell}")
    while True:
        choice = input("Enter your spell: ").lower()
        if choice in spells:
            return spells[choice]
        print("Invalid choice. Please choose a valid spell.")
        
def calculate_advantage(player_choice, enemy_choice):
    """Determine advantage based on player and enemy choices."""
    if player_choice == "Shield":
        return 0  # Shield never has advantage or disadvantage
    if player_choice == enemy_choice:
        return 0  # No advantage if choices are the same
    advantage_rules = {
        "Melee": "Magic",  # Melee has advantage over Magic
        "Magic": "Ranged",  # Magic has advantage over Ranged
        "Ranged": "Melee"  # Ranged has advantage over Melee
    }
    return 7 if advantage_rules[player_choice] == enemy_choice else 0

# Global penalty storage for Illusion spell
enemy_roll_penalties = {}
# Correcting the error at line 210






def calculate_damage(player_choice, player_roll, enemy_rolls, enemy_choices, style=None, target_enemy_id=None, attack_phase=True):
    """Calculate damage based on rolls, choices, and styles. During attack_phase, no player damage."""
    global enemies, player_health, enemy_roll_penalties

    print(f"Player Roll: {player_roll}")
    player_damage = 0
    enemy_damages = []

    # Apply penalty if Illusion was cast previously
    for i, enemy in enumerate(enemies):
        if enemy["id"] in enemy_roll_penalties:
            penalty = enemy_roll_penalties[enemy["id"]]
            print(f"{enemy['type']} has a penalty of {penalty} to its next roll.")
            enemy_rolls[i] -= penalty  # Apply penalty

    # Player's attack phase - apply attack logic
    if attack_phase:
        if player_choice == "Shield":
            # Shield Styles: Apply bonuses to defense
            if style == "a":  # Runeguard style
                print("You shielded with Runeguard, adding +6 to your roll.")
                player_roll += 6  # Runeguard adds +6 to the player's roll
            elif style == "b":  # Forgeguard style
                print("You shielded with Forgeguard, adding +10 to your roll.")
                player_roll += 10  # Forgeguard adds +10 to the player's roll
            print("You shielded and dealt no damage to enemies.")
        else:
            if style == "c":  # Bomb style: Apply bonus damage and splash
                target_enemy = enemies[target_enemy_id]
                damage_to_target = 15 + roll_dice(10)
                target_enemy["health"] -= damage_to_target
                player_damage += damage_to_target
                print(f"You dealt {damage_to_target} damage to {target_enemy['type']} with a Bomb!")
                # Splash damage to other enemies
                for i, enemy in enumerate(enemies):
                    if i != target_enemy_id:
                        splash_damage = roll_dice(4)
                        enemy["health"] -= splash_damage
                        print(f"{enemy['type']} took {splash_damage} splash damage from the Bomb!")
            else:  # Other attack styles
                for i, enemy in enumerate(enemies):
                    enemy_roll = max(enemy_rolls[i], 0)
                    advantage = calculate_advantage(player_choice, enemy_choices[i]) if player_choice != "Shield" else 0
                    enemy_roll += advantage

                    print(f"{enemy['type']} adjusted roll: {enemy_roll} (advantage: {advantage})")

                    if player_roll > enemy_roll:  # Player wins
                        damage = roll_dice(10)
                        player_damage += damage
                        print(f"You dealt {damage} damage to {enemy['type']}!")
                        enemy["health"] -= damage
                        enemy_damages.append(0)  # No damage from enemy
                    else:  # Enemy wins
                        damage = roll_dice(6)
                        print(f"{enemy['type']} dealt {damage} damage to you!")
                        enemy_damages.append(damage)

    else:  # During enemy's attack phase, calculate damage to the player
        for i, enemy in enumerate(enemies):
            enemy_roll = max(enemy_rolls[i], 0)
            advantage = calculate_advantage(enemy_choices[i], player_choice) if enemy_choices[i] != "Shield" else 0
            enemy_roll += advantage

            # Apply defense bonuses during the enemy's attack phase
            if style == "a":  # Runeguard (during defense phase)
                enemy_roll += 6  # +6 to the enemy's roll during the defense phase
                print(f"{enemy['type']} has been penalized by your shield! You added +6 to the defense roll.")
            elif style == "b":  # Forgeguard (during defense phase)
                enemy_roll += 10  # +10 to the enemy's roll during the defense phase
                print(f"{enemy['type']} has been penalized by your shield! You added +10 to the defense roll.")

            print(f"{enemy['type']} adjusted roll: {enemy_roll} (advantage: {advantage})")

            if enemy_roll > player_roll:  # Enemy hits
                damage = roll_dice(6)
                player_health -= damage
                print(f"{enemy['type']} dealt {damage} damage to you!")
                enemy_damages.append(damage)
            else:  # Player dodges
                enemy_damages.append(0)

        # Apply Runeguard reflection after enemy attack phase
        if style == "a":  # Runeguard: Reflect half damage
            reflected_damage = (damage + 1) // 2
            for enemy in enemies:
                enemy["health"] -= reflected_damage
                print(f"{enemy['type']} took {reflected_damage} reflected damage from your shield!")

    return player_damage, enemy_damages

    
    
    
    
    


def battle():
    """Simulate a battle."""
    global enemies, player_health, xp, gold, level

    while player_health > 0 and len(enemies) > 0:
        clear_screen()
        print("\nYour Turn!")

        # Display level, stats, and gold
        print(f"Level: {level} | Atk: {permanent_bonuses['Melee']} | Def: {permanent_bonuses['Shield']} | Magic: {permanent_bonuses['Magic']} | Gold: {gold} | XP: {xp}/{level * 100}")
        print(f"Your HP: {generate_hp_bar(player_health, 30)}")

        # Display enemies
        print("\nEnemies:")
        for i, enemy in enumerate(enemies):
            print(f"{i + 1}. {enemy['type']} ({generate_hp_bar(enemy['health'], enemy['max_health'])})")

        target_enemy_id = choose_enemy()
        target_enemy = enemies[target_enemy_id]

        action = choose_action()
        spell, style = None, None

        if action == "Magic":
            spell = choose_spell()
        elif action == "Melee":
            style = choose_melee_option()
        elif action == "Ranged":
            style = choose_ranged_option()
        elif action == "Shield":
            style = choose_shield_option()

        # Reset damage for each turn
        total_enemy_damage = 0
        player_damage = 0

        # Enemy actions and rolls
        enemy_rolls = [roll_dice(20) for _ in enemies]
        enemy_choices = [random.choice(list(actions.values())) for _ in enemies]

        print("\nEnemies' Choices and Rolls:")
        for enemy, roll, choice in zip(enemies, enemy_rolls, enemy_choices):
            print(f"{enemy['type']}: Chose {choice}, Rolled {roll}")

        # Player's roll
        player_roll = roll_dice(20)
        print(f"\nYour Roll: {player_roll}")

        # Calculate damage during player action phase
        player_damage, enemy_damages = calculate_damage(
            action, player_roll, enemy_rolls, enemy_choices, style=style, target_enemy_id=target_enemy_id, attack_phase=True
        )

        # Apply damage to the target enemy only (no player damage during this phase)
        target_enemy["health"] -= player_damage  # Target enemy takes damage

        # Show results
        print(f"\nPlayer dealt {player_damage} damage to {target_enemy['type']}")
        for i, damage in enumerate(enemy_damages):
            if damage > 0 and i < len(enemies):
                print(f"{enemies[i]['type']} dealt {damage} damage to you.")

        # Now enemies attack in their phase
        print("\nEnemies are attacking!")

        for i, enemy in enumerate(enemies):
            enemy_attack_roll = roll_dice(20)
            player_defense_roll = roll_dice(20)

            print(f"{enemy['type']} attacks: Roll = {enemy_attack_roll}, Player Defense Roll = {player_defense_roll}")

            # Apply defense bonuses only if the player is using Shield
            if action == "Shield":
                if style == "a":  # Runeguard
                    player_defense_roll += 6  # +6 to defense roll for Runeguard
                    print(f"Your defense roll is boosted by +6 due to Runeguard shield!")
                elif style == "b":  # Forgeguard
                    player_defense_roll += 10  # +10 to defense roll for Forgeguard
                    print(f"Your defense roll is boosted by +10 due to Forgeguard shield!")
            else:
                print("No defense bonus applied, as you are not using a shield.")

            # Check if the enemy hits
            if enemy_attack_roll > player_defense_roll:  # Enemy hits the player
                damage = roll_dice(6)  # Enemy's damage roll
                total_enemy_damage += damage
                player_health -= damage
                print(f"{enemy['type']} dealt {damage} damage to you!")
            else:
                print(f"{enemy['type']} missed!")

        # Reflection logic for Runeguard: Reflect half of incoming damage
        if style == "a":  # Runeguard
            reflected_damage = total_enemy_damage // 2
            print(f"Your Runeguard shield reflected {reflected_damage} damage to all enemies!")
            for enemy in enemies:
                enemy["health"] -= reflected_damage  # Reflect half of incoming damage to each enemy
                print(f"{enemy['type']} took {reflected_damage} reflected damage.")

        print(f"\nYou took {total_enemy_damage} damage from enemies.")

        # Check if any enemies are defeated
        enemies = [enemy for enemy in enemies if enemy["health"] > 0]

        # If the player’s health reaches 0, game over
        if player_health <= 0:
            print("\nGame Over! You were defeated.")
            return

        # If there are no more enemies, the player wins this battle
        if not enemies:
            print("\nAll enemies have been defeated!")
            xp_gained = 10 * level
            xp += xp_gained
            print(f"You gained {xp_gained} XP!")
            if xp >= level * 100:
                level_up()
            return

        # Pause for the player to review results
        input("\nPress Enter to continue...")






def level_up():
    """Handle leveling up."""
    global level, player_health, xp, gold, permanent_bonuses

    # Level up based on XP
    if xp >= 40:  # Now levels up every 40 XP
        level += 1
        player_health += 10  # Increase player health by 10 on level-up
        xp = 0  # Reset XP to 0 after leveling up
        print(f"\nCongratulations! You've reached Level {level}!")
        print(f"Your HP is now {player_health}. Choose a permanent bonus:")
        print("a. +1 Melee\nb. +1 Ranged\nc. +1 Magic\nd. +1 Shield")
        while True:
            bonus_choice = input("Choose a bonus: ").lower()
            if bonus_choice in ["a", "b", "c", "d"]:
                if bonus_choice == "a":
                    permanent_bonuses["Melee"] += 1
                elif bonus_choice == "b":
                    permanent_bonuses["Ranged"] += 1
                elif bonus_choice == "c":
                    permanent_bonuses["Magic"] += 1
                elif bonus_choice == "d":
                    permanent_bonuses["Shield"] += 1
                break
            print("Invalid choice. Please choose a valid bonus.")
        print(f"Your new bonuses: {permanent_bonuses}")
        return

    # Every subsequent level-up (no change here, it just applies after 40 XP)
    if xp >= 40:
        level += 1
        player_health += 10
        xp = 0  # Reset XP to 0 after leveling up
        print(f"\nCongratulations! You've reached Level {level}!")
        print(f"Your HP is now {player_health}. Choose a permanent bonus:")
        print("a. +1 Melee\nb. +1 Ranged\nc. +1 Magic\nd. +1 Shield")
        while True:
            bonus_choice = input("Choose a bonus: ").lower()
            if bonus_choice in ["a", "b", "c", "d"]:
                if bonus_choice == "a":
                    permanent_bonuses["Melee"] += 1
                elif bonus_choice == "b":
                    permanent_bonuses["Ranged"] += 1
                elif bonus_choice == "c":
                    permanent_bonuses["Magic"] += 1
                elif bonus_choice == "d":
                    permanent_bonuses["Shield"] += 1
                break
            print("Invalid choice. Please choose a valid bonus.")
        print(f"Your new bonuses: {permanent_bonuses}")

    # Special Purchase at Level 5
    if level == 5:
        print("\nYou've reached Level 5! You can now purchase an upgrade.")
        print("a. +1 Melee Weapon\nb. +1 Shield\nc. +1 Ranged Weapon\nd. +1 Spell Focus")
        while True:
            purchase_choice = input("Choose an upgrade: ").lower()
            if purchase_choice == "a":
                permanent_bonuses["Melee"] += 1
                break
            elif purchase_choice == "b":
                permanent_bonuses["Shield"] += 1
                break
            elif purchase_choice == "c":
                permanent_bonuses["Ranged"] += 1
                break
            elif purchase_choice == "d":
                permanent_bonuses["Magic"] += 1
                break
            print("Invalid choice. Please choose a valid upgrade.")
        print(f"\nYour new bonuses: {permanent_bonuses}")

# Main Game Loop
print("Welcome to the RPG Dice Roll Adventure!")

# Game loop runs while the player is alive
while player_health > 0:
    generate_enemies()  # Generate new enemies for the battle
    battle()  # Start the battle phase

print("\nThank you for playing!")
            
            
            
                        
                        